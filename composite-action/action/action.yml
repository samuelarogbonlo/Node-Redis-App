name: Custom Composite action to deploy terraform resources

description: |
  This action deploys the Forest infrastructure with Terraform

inputs:
  environment:
    description: 'The terraform plan for the the environment infrastructure to be deployed'
    required: true
  aws_access_key_id:
    description: 'AWS access keys id used by terraform to deploy infrastructure'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access keys used by terraform deploy infrastructure'
    required: true
  aws_region:
    description: 'AWS region'
    required: true
  working_directory:
    description: 'The working Directory'
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: v1.6.3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}    

    - name: Terraform Init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Validate
      shell: bash
      run: terraform validate -no-color
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Plan
      shell: bash
      if: github.event_name == 'pull_request'
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan -no-color -input=false || echo "Terraform plan exit code: $?"
      continue-on-error: true
      working-directory: ${{ inputs.working_directory }}

    - name: Find Comment
      if: github.event.pull_request.draft == false &&
          github.event_name == 'pull_request'
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-regex: "^### Forest: ${{ inputs.environment }} Infrastructure Plan"


    - name: Create or Update Comment
      if: github.event.pull_request.draft == false &&
          github.event_name == 'pull_request' &&
          !contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.')
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### Forest: ${{ inputs.environment }} Infrastructure Plan: ${{ steps.plan.outcome }}

          <details><summary>Show Plan</summary>

          ```
          ${{ steps.plan.outputs.stdout }}
          ```

          </details>
        edit-mode: replace

    - name: Delete Comment
      uses: detomarco/delete-comments@v1.0.4
      if: github.event.pull_request.draft == false &&
          github.event_name == 'pull_request' &&
          contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.')
      with:
          comment-id: ${{ steps.fc.outputs.comment-id }}

    - name: Terraform Plan Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if grep -q 'No changes.' tfplan; then
          echo "No changes detected."
        else
          echo "Changes detected. Redeploying everything..."
          terraform destroy -auto-approve -input=false
          terraform apply -auto-approve -input=false
        fi
      shell: bash
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Force Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        terraform destroy -auto-approve -input=false
        terraform apply -auto-approve -input=false
